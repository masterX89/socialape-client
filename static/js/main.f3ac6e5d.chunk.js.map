{"version":3,"sources":["components/Navbar.js","components/Scream.js","pages/Home.js","constants/Constants.js","pages/Login.js","pages/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar","Toolbar","className","Button","color","component","Link","to","Component","Scream","_this$props","this","props","classes","_this$props$scream","scream","body","createdAt","userImage","userHandle","screamId","likeCount","commentCount","Card","card","CardMedia","image","title","CardContent","content","Typography","variant","concat","withStyles","display","marginBottom","minWidth","padding","objectFit","Home","state","screams","_this2","axios","get","then","res","setState","data","catch","err","console","log","recentScreamsMarkup","map","components_Scream","key","Grid","container","spacing","item","sm","xs","Login","Signup","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","App","MuiThemeProvider_default","react_router_dom","basename","components_Navbar","react_router","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3ac6e5d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n// MUI stuff\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <AppBar>\n                <Toolbar className='nav-container'>\n                    <Button color='inherit' component={Link} to='/'>Home</Button>\n                    <Button color='inherit' component={Link} to='/signup'>Signup</Button>\n                    <Button color='inherit' component={Link} to='/login'>Login</Button>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n}\n\nexport default Navbar;\n","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\n\n// MUI stuff\nimport {withStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n    card: {\n        display: 'flex',\n        marginBottom: 20\n    },\n    image: {\n        minWidth: 200\n    },\n    content: {\n        padding: 25,\n        objectFit: 'cover'\n    }\n};\n\nclass Scream extends Component {\n    render() {\n        const {classes, scream: {body, createdAt, userImage, userHandle, screamId, likeCount, commentCount}} = this.props;\n        return (\n            <Card className={classes.card}>\n                <CardMedia image={userImage} title='Profile Image' className={classes.image}/>\n                <CardContent className={classes.content}>\n                    <Typography variant='h5' color='primary' component={Link}\n                                to={`/users/${userHandle}`}>{userHandle}</Typography>\n                    <Typography variant='body2' color='textSecondary'>{createdAt}</Typography>\n                    <Typography variant='body1'>{body}</Typography>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default withStyles(styles)(Scream);\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport {FIREBASE_CORE_HOST} from '../constants/Constants';\n\nimport Scream from '../components/Scream';\n\nclass Home extends Component {\n    state = {\n        screams: null\n    };\n\n    componentDidMount() {\n        axios.get(`${FIREBASE_CORE_HOST}/screams`)\n            .then(res => {\n                this.setState({\n                    screams: res.data\n                })\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    render() {\n        let recentScreamsMarkup = this.state.screams ? (\n            this.state.screams.map(scream => <Scream key={scream.screamId} scream={scream}/>\n            )\n        ) : <p>Loading...</p>;\n        return (\n            <Grid container spacing={2}>\n                <Grid item sm={8} xs={12}>\n                    {recentScreamsMarkup}\n                </Grid>\n                <Grid item sm={4} xs={12}>\n                    <p>Profile</p>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nexport default Home;\n","export const FIREBASE_CORE_HOST = 'https://asia-east2-xhk1995.cloudfunctions.net/api';\n","import React, {Component} from 'react';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Login Page</h1>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\n\nclass Signup extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Signup Page</h1>\n            </div>\n        );\n    }\n}\n\nexport default Signup;\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme'\n// Components\nimport Navbar from './components/Navbar';\n\n// Pages\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#33c9dc',\n            main: '#00bcd4',\n            dark: '#008394',\n            contrastText: '#fff'\n        },\n        secondary: {\n            light: '#ff6333',\n            main: '#ff3d00',\n            dark: '#b22a00',\n            contrastText: '#fff'\n        }\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className='App'>\n                    <Router basename='/socialape-client'>\n                        <Navbar/>\n                        <div className='container'>\n                            <Switch>\n                                <Route exact path=\"/\" component={Home}/>\n                                <Route path=\"/login\" component={Login}/>\n                                <Route path=\"/signup\" component={Signup}/>\n                            </Switch>\n                        </div>\n                    </Router>\n                </div>\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}